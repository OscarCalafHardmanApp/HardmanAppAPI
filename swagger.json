{
  "openapi" : "3.0.0",
  "info" : {
    "description" : "Basic concepts -> https://hardman-app.atlassian.net/wiki/spaces/API/pages/172032001/Shipments Security concepts ->",
    "version" : "1.0.0-oas3",
    "title" : "HardmanApp API documentation",
    "termsOfService" : "http://hardman.app",
    "contact" : {
      "email" : "help@hardman.app"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags" : [ {
    "name" : "shipments",
    "description" : "Everything about shipments"
  }, {
    "name" : "routes",
    "description" : "Everything about routes"
  }, {
    "name" : "phases",
    "description" : "Everything about phases"
  }, {
    "name" : "telemetrics",
    "description" : "Everythin about telemetrics"
  } ],
  "paths" : {
    "/travels" : {
      "get" : {
        "tags" : [ "routes" ],
        "summary" : "Get all the routes",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RouteSimple"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "ApiKey" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "routes" ],
        "summary" : "Create a route",
        "operationId" : "createRoute",
        "responses" : {
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "ApiKey" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Route"
              }
            }
          },
          "description" : "Route object that needs to be added",
          "required" : true
        }
      },
      "put" : {
        "tags" : [ "routes" ],
        "summary" : "Modify a route",
        "operationId" : "updateRoute",
        "responses" : {
          "402" : {
            "description" : "Object not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "ApiKey" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Route"
              }
            }
          },
          "description" : "Route object that needs to be updated",
          "required" : true
        }
      }
    },
    "/travels/id" : {
      "get" : {
        "tags" : [ "routes" ],
        "summary" : "Get the route with a specific id",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "The route id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RouteSimple"
                }
              }
            }
          },
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "ApiKey" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "routes" ],
        "summary" : "Delete a route",
        "operationId" : "deleteRoute",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "The route id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "402" : {
            "description" : "Object not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "ApiKey" : [ ]
        } ]
      }
    },
    "/phases/routeId" : {
      "get" : {
        "tags" : [ "phases" ],
        "summary" : "Get all the phases for a specific route",
        "parameters" : [ {
          "name" : "routeId",
          "in" : "query",
          "description" : "The route id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PhaseSimple"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "ApiKey" : [ ]
        } ]
      }
    },
    "/phases/routeId/phaseId" : {
      "get" : {
        "tags" : [ "phases" ],
        "summary" : "Get the a specific phase for a specific route",
        "parameters" : [ {
          "name" : "routeId",
          "in" : "query",
          "description" : "The route id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "phaseId",
          "in" : "query",
          "description" : "The phase id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PhaseSimple"
                }
              }
            }
          },
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "ApiKey" : [ ]
        } ]
      }
    },
    "/phases" : {
      "post" : {
        "tags" : [ "phases" ],
        "summary" : "Create a phase",
        "operationId" : "createPhase",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Phase"
                }
              }
            }
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "ApiKey" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PhaseSimple"
              }
            }
          },
          "description" : "Phase object that needs to be added",
          "required" : true
        }
      },
      "put" : {
        "tags" : [ "phases" ],
        "summary" : "Modify a phase",
        "operationId" : "updatePhase",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Phase"
                }
              }
            }
          },
          "402" : {
            "description" : "Object not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "ApiKey" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PhaseSimple"
              }
            }
          },
          "description" : "Phase object that needs to be updated",
          "required" : true
        }
      }
    },
    "/phases/phaseId" : {
      "get" : {
        "tags" : [ "phases" ],
        "summary" : "Get the a specific phase",
        "parameters" : [ {
          "name" : "phaseId",
          "in" : "query",
          "description" : "The phase id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Phase"
                }
              }
            }
          },
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "ApiKey" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "phases" ],
        "summary" : "Delete a phase",
        "operationId" : "deletePhase",
        "parameters" : [ {
          "name" : "phaseId",
          "in" : "query",
          "description" : "The phase id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "402" : {
            "description" : "Object not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "ApiKey" : [ ]
        } ]
      }
    },
    "/shipments" : {
      "get" : {
        "tags" : [ "shipments" ],
        "summary" : "Get all the shipments",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Shipment"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "ApiKey" : [ ]
        } ]
      }
    }
  },
  "externalDocs" : {
    "description" : "Find out more about Hardman.app",
    "url" : "http://hardman.app"
  },
  "servers" : [ {
    "url" : "https://my-api.hardman.app/v3/api"
  } ],
  "components" : {
    "securitySchemes" : {
      "ApiKey" : {
        "type" : "apiKey",
        "in" : "header",
        "name" : "api_key"
      }
    },
    "schemas" : {
      "Route" : {
        "type" : "object",
        "required" : [ "id" ],
        "allOf" : [ {
          "$ref" : "#/components/schemas/RouteSimple"
        } ],
        "properties" : {
          "phases" : {
            "type" : "array",
            "xml" : {
              "name" : "tag",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/Phase"
            }
          }
        }
      },
      "RouteSimple" : {
        "type" : "object",
        "required" : [ "id" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "write_uuid" : {
            "type" : "string",
            "description" : "uuid to access as Write"
          },
          "read_uuid" : {
            "type" : "string",
            "description" : "uuid to access as readOnly"
          },
          "name" : {
            "type" : "string",
            "description" : "title of short description of the route"
          },
          "date_start" : {
            "type" : "string",
            "format" : "date"
          },
          "date_end" : {
            "type" : "string",
            "format" : "date"
          },
          "driver" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "driver id"
          },
          "customer" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "customer id"
          },
          "price_client" : {
            "type" : "number",
            "description" : "the price for the client"
          },
          "price_driver" : {
            "type" : "number",
            "description" : "the price for the driver"
          },
          "reference" : {
            "type" : "string",
            "description" : "internal reference number in your systems"
          },
          "accepted" : {
            "type" : "boolean",
            "description" : "Indicate if the route has been accepted by the driver"
          },
          "status" : {
            "type" : "string",
            "description" : "the status of the route",
            "enum" : [ "Draft", "Ready", "Running", "Finished" ]
          },
          "assigned_manager" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "user id that acts as manager"
          },
          "previous_status" : {
            "type" : "string",
            "description" : "previous state of the route",
            "enum" : [ "Draft", "Ready", "Running", "Finished" ]
          },
          "custom_inputs" : {
            "type" : "object"
          },
          "banner_text" : {
            "type" : "string",
            "description" : "Alternative to banner_html where it's not possible to show html code"
          },
          "banner_html" : {
            "type" : "string",
            "description" : "A HTML code that will be shown with the route"
          },
          "comments" : {
            "type" : "string",
            "description" : "A description fro the route"
          }
        },
        "xml" : {
          "name" : "Route"
        }
      },
      "Phase" : {
        "type" : "object",
        "required" : [ "id" ],
        "allOf" : [ {
          "$ref" : "#/components/schemas/PhaseSimple"
        } ],
        "properties" : {
          "created_at" : {
            "type" : "string",
            "format" : "date_time"
          },
          "address" : {
            "type" : "string"
          },
          "intermodal" : {
            "type" : "string"
          }
        }
      },
      "PhaseSimple" : {
        "type" : "object",
        "required" : [ "id", "order" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "travel_id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Route Id"
          },
          "order" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Order. The phases can be re ordered using this attribute"
          },
          "ambit" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Ambit. Security term"
          },
          "name" : {
            "type" : "string",
            "example" : "doggie"
          },
          "phasename" : {
            "type" : "string",
            "description" : "The name of the phase. If null or blank we will use the directionl."
          },
          "arrived" : {
            "type" : "object"
          },
          "done" : {
            "type" : "object"
          }
        },
        "xml" : {
          "name" : "Phase"
        }
      },
      "Shipment" : {
        "type" : "object",
        "required" : [ "id" ],
        "allOf" : [ {
          "$ref" : "#/components/schemas/ShipmentSimple"
        } ],
        "properties" : {
          "origin" : {
            "type" : "object",
            "$ref" : "#/components/schemas/Address"
          },
          "destination" : {
            "type" : "object",
            "$ref" : "#/components/schemas/Address"
          }
        }
      },
      "ShipmentSimple" : {
        "type" : "object",
        "required" : [ "id" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "write_uuid" : {
            "type" : "string",
            "description" : "uuid to access as Write"
          },
          "read_uuid" : {
            "type" : "string",
            "description" : "uuid to access as readOnly"
          },
          "travel_id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Route Id"
          },
          "origin_id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Origin Address Id"
          },
          "destination_id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Destination Address Id"
          },
          "comments" : {
            "type" : "string"
          },
          "notes_text" : {
            "type" : "string",
            "description" : "Alternative to html where it's not possible to show html code"
          },
          "notes_html" : {
            "type" : "string",
            "description" : "A HTML code that will be shown with the object"
          },
          "internal_id" : {
            "type" : "string",
            "description" : "internal reference number in your systems"
          },
          "goods" : {
            "type" : "string",
            "description" : "A description of the goods"
          },
          "origin_eda" : {
            "type" : "string",
            "format" : "datetime"
          },
          "origin_eta" : {
            "type" : "string",
            "format" : "datetime"
          },
          "destination_eda" : {
            "type" : "string",
            "format" : "datetime"
          },
          "destination_eta" : {
            "type" : "string",
            "format" : "datetime"
          },
          "origin_arrived" : {
            "type" : "string",
            "format" : "datetime"
          },
          "origin_done" : {
            "type" : "string",
            "format" : "datetime"
          },
          "destination_arrived" : {
            "type" : "string",
            "format" : "datetime"
          },
          "destination_done" : {
            "type" : "string",
            "format" : "datetime"
          },
          "created_at" : {
            "type" : "string",
            "format" : "datetime"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "datetime"
          },
          "details" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "ShipmenSimple"
        }
      },
      "Address" : {
        "type" : "object",
        "required" : [ "id" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "address" : {
            "type" : "string",
            "description" : "Full address"
          },
          "city" : {
            "type" : "string"
          },
          "country_id" : {
            "type" : "integer"
          },
          "postal_code" : {
            "type" : "string"
          },
          "coordinates" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "contact_name" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "scheduled_time" : {
            "type" : "string"
          },
          "ambit_id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Ambit Id"
          },
          "enabled_slots" : {
            "type" : "boolean"
          },
          "timetable_start_time" : {
            "type" : "string",
            "format" : "time"
          },
          "interval" : {
            "type" : "string",
            "format" : "time"
          },
          "is_active" : {
            "type" : "boolean",
            "descriptions" : "You only can use the address if it's active"
          }
        },
        "xml" : {
          "name" : "Address"
        }
      }
    }
  }
}